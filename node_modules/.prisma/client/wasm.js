
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  createdAt: 'createdAt'
};

exports.Prisma.UserProfileScalarFieldEnum = {
  id: 'id',
  ageRange: 'ageRange',
  gender: 'gender',
  recentProblems: 'recentProblems',
  mainGoal: 'mainGoal',
  feelingRecently: 'feelingRecently',
  stressStartDate: 'stressStartDate',
  emotionDuration: 'emotionDuration',
  moodSwingFrequency: 'moodSwingFrequency',
  supportNeedFrequency: 'supportNeedFrequency',
  supportTypeInterest: 'supportTypeInterest',
  mentalHealthChallenges: 'mentalHealthChallenges',
  motivation: 'motivation',
  soughtHelpBefore: 'soughtHelpBefore',
  professionalHelpDuration: 'professionalHelpDuration',
  supportKindLookingFor: 'supportKindLookingFor',
  socialConnectionImportance: 'socialConnectionImportance',
  learnAboutMentalHealth: 'learnAboutMentalHealth',
  mentalHealthTopics: 'mentalHealthTopics',
  receiveReminders: 'receiveReminders',
  reminderFrequency: 'reminderFrequency',
  userId: 'userId'
};

exports.Prisma.TherapistScalarFieldEnum = {
  id: 'id',
  name: 'name',
  title: 'title',
  specialization: 'specialization',
  pricePerSession: 'pricePerSession',
  profilePicture: 'profilePicture',
  rating: 'rating',
  yearsExperience: 'yearsExperience',
  totalSessions: 'totalSessions',
  totalClients: 'totalClients'
};

exports.Prisma.TherapistProfileScalarFieldEnum = {
  id: 'id',
  bio: 'bio',
  specializations: 'specializations',
  experiences: 'experiences',
  languages: 'languages',
  workPlaces: 'workPlaces',
  strNumber: 'strNumber',
  educations: 'educations',
  therapyApproaches: 'therapyApproaches',
  therapistId: 'therapistId'
};

exports.Prisma.PostScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  authorId: 'authorId'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  authorId: 'authorId',
  postId: 'postId'
};

exports.Prisma.LikeScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  userId: 'userId',
  postId: 'postId'
};

exports.Prisma.GroupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.GroupMessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  senderId: 'senderId',
  groupId: 'groupId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  UserProfile: 'UserProfile',
  Therapist: 'Therapist',
  TherapistProfile: 'TherapistProfile',
  Post: 'Post',
  Comment: 'Comment',
  Like: 'Like',
  Group: 'Group',
  GroupMessage: 'GroupMessage'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/mds/Documents/GitHub/scribesoul_backend/node_modules/@prisma/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/mds/Documents/GitHub/scribesoul_backend/prisma/schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.3",
  "engineVersion": "bb420e667c1820a8c05a38023385f6cc7ef8e83a",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// prisma/schema.prisma\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id        Int          @id @default(autoincrement())\n  email     String       @unique\n  name      String\n  password  String\n  createdAt DateTime     @default(now())\n  profile   UserProfile?\n\n  // TAMBAHKAN TIGA BARIS DI BAWAH INI\n  posts        Post[]\n  comments     Comment[]\n  likes        Like[]\n  groups       Group[]\n  sentMessages GroupMessage[]\n}\n\nmodel UserProfile {\n  id                         Int      @id @default(autoincrement())\n  ageRange                   String\n  gender                     String\n  recentProblems             String[]\n  mainGoal                   String\n  feelingRecently            String\n  stressStartDate            String\n  emotionDuration            String\n  moodSwingFrequency         String\n  supportNeedFrequency       String\n  supportTypeInterest        String[]\n  mentalHealthChallenges     String[]\n  motivation                 String\n  soughtHelpBefore           Boolean\n  professionalHelpDuration   String?\n  supportKindLookingFor      String\n  socialConnectionImportance String\n  learnAboutMentalHealth     Boolean\n  mentalHealthTopics         String[]\n  receiveReminders           Boolean\n  reminderFrequency          String\n\n  user   User @relation(fields: [userId], references: [id])\n  userId Int  @unique\n}\n\nmodel Therapist {\n  id              Int     @id @default(autoincrement())\n  name            String\n  title           String // e.g., \"M.Psi, Psikolog\"\n  specialization  String // e.g., \"Gangguan Kecemasan dan PTSD\"\n  pricePerSession Float\n  profilePicture  String? // URL ke foto profil\n  rating          Float? // Rating rata-rata\n  yearsExperience Int\n  totalSessions   Int\n  totalClients    Int\n\n  // Relasi: Satu Terapis punya satu profil detail\n  detailedProfile TherapistProfile?\n}\n\nmodel TherapistProfile {\n  id                Int      @id @default(autoincrement())\n  bio               String   @db.Text // Teks \"Hi, I'm Clara...\"\n  specializations   String[] // [\"Depresi\", \"Anxiety\", \"Bipolar\"]\n  experiences       String[] // [\"8+ years in private practice\", \"Community mental health\"]\n  languages         String[] // [\"English\", \"Bahasa Indonesia\"]\n  workPlaces        String[] // [\"RSI Menur Surabaya\"]\n  strNumber         String\n  educations        String[] // [\"Universitas Ciputra Surabaya\", \"Universitas Gadjah Mada\"]\n  therapyApproaches String[] // [\"CBT\", \"Art Therapy\"]\n\n  // Relasi: Terhubung ke model Therapist\n  therapist   Therapist @relation(fields: [therapistId], references: [id])\n  therapistId Int       @unique\n}\n\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  content   String   @db.Text\n  createdAt DateTime @default(now())\n\n  // Relasi: Dibuat oleh siapa\n  author   User @relation(fields: [authorId], references: [id])\n  authorId Int\n\n  // Relasi: Punya banyak comment dan like\n  comments Comment[]\n  likes    Like[]\n}\n\nmodel Comment {\n  id        Int      @id @default(autoincrement())\n  content   String\n  createdAt DateTime @default(now())\n\n  // Relasi: Dibuat oleh siapa\n  author   User @relation(fields: [authorId], references: [id])\n  authorId Int\n\n  // Relasi: Berada di post mana\n  post   Post @relation(fields: [postId], references: [id])\n  postId Int\n}\n\nmodel Like {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n\n  // Relasi: Dibuat oleh siapa\n  user   User @relation(fields: [userId], references: [id])\n  userId Int\n\n  // Relasi: Nge-like post mana\n  post   Post @relation(fields: [postId], references: [id])\n  postId Int\n\n  @@unique([userId, postId]) // User hanya bisa like satu post sekali\n}\n\nmodel Group {\n  id          Int     @id @default(autoincrement())\n  name        String  @unique\n  description String?\n\n  // Relasi: Anggota grup dan pesan di dalam grup\n  members  User[]\n  messages GroupMessage[]\n}\n\nmodel GroupMessage {\n  id        Int      @id @default(autoincrement())\n  content   String   @db.Text\n  createdAt DateTime @default(now())\n\n  // Relasi: Pesan ini dikirim oleh siapa\n  sender   User @relation(fields: [senderId], references: [id])\n  senderId Int\n\n  // Relasi: Pesan ini ada di grup mana\n  group   Group @relation(fields: [groupId], references: [id])\n  groupId Int\n}\n",
  "inlineSchemaHash": "30e9d3762258cc06169320715742922e9f95e56e0c9f53f295fe7d2de8f239cf",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"profile\",\"kind\":\"object\",\"type\":\"UserProfile\",\"relationName\":\"UserToUserProfile\"},{\"name\":\"posts\",\"kind\":\"object\",\"type\":\"Post\",\"relationName\":\"PostToUser\"},{\"name\":\"comments\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"CommentToUser\"},{\"name\":\"likes\",\"kind\":\"object\",\"type\":\"Like\",\"relationName\":\"LikeToUser\"},{\"name\":\"groups\",\"kind\":\"object\",\"type\":\"Group\",\"relationName\":\"GroupToUser\"},{\"name\":\"sentMessages\",\"kind\":\"object\",\"type\":\"GroupMessage\",\"relationName\":\"GroupMessageToUser\"}],\"dbName\":null},\"UserProfile\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"ageRange\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"gender\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"recentProblems\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mainGoal\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"feelingRecently\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"stressStartDate\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emotionDuration\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"moodSwingFrequency\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"supportNeedFrequency\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"supportTypeInterest\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mentalHealthChallenges\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"motivation\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"soughtHelpBefore\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"professionalHelpDuration\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"supportKindLookingFor\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"socialConnectionImportance\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"learnAboutMentalHealth\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"mentalHealthTopics\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"receiveReminders\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"reminderFrequency\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserProfile\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"}],\"dbName\":null},\"Therapist\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"specialization\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"pricePerSession\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"profilePicture\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rating\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"yearsExperience\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalSessions\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalClients\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"detailedProfile\",\"kind\":\"object\",\"type\":\"TherapistProfile\",\"relationName\":\"TherapistToTherapistProfile\"}],\"dbName\":null},\"TherapistProfile\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"bio\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"specializations\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"experiences\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"languages\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"workPlaces\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"educations\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"therapyApproaches\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"therapist\",\"kind\":\"object\",\"type\":\"Therapist\",\"relationName\":\"TherapistToTherapistProfile\"},{\"name\":\"therapistId\",\"kind\":\"scalar\",\"type\":\"Int\"}],\"dbName\":null},\"Post\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"author\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PostToUser\"},{\"name\":\"authorId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"comments\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"CommentToPost\"},{\"name\":\"likes\",\"kind\":\"object\",\"type\":\"Like\",\"relationName\":\"LikeToPost\"}],\"dbName\":null},\"Comment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"author\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CommentToUser\"},{\"name\":\"authorId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"post\",\"kind\":\"object\",\"type\":\"Post\",\"relationName\":\"CommentToPost\"},{\"name\":\"postId\",\"kind\":\"scalar\",\"type\":\"Int\"}],\"dbName\":null},\"Like\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"LikeToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"post\",\"kind\":\"object\",\"type\":\"Post\",\"relationName\":\"LikeToPost\"},{\"name\":\"postId\",\"kind\":\"scalar\",\"type\":\"Int\"}],\"dbName\":null},\"Group\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"members\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"GroupToUser\"},{\"name\":\"messages\",\"kind\":\"object\",\"type\":\"GroupMessage\",\"relationName\":\"GroupToGroupMessage\"}],\"dbName\":null},\"GroupMessage\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"sender\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"GroupMessageToUser\"},{\"name\":\"senderId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"group\",\"kind\":\"object\",\"type\":\"Group\",\"relationName\":\"GroupToGroupMessage\"},{\"name\":\"groupId\",\"kind\":\"scalar\",\"type\":\"Int\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

